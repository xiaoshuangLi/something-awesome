@import "frontend/css/func.scss";
// 最上面定义了动画使用的常量

$r: 110; //波纹的半径 110px
$num: 5; //同时存在的波纹数量 5个
$time: 5; //动画时长 5秒
$fpsPer: 30; //动画每秒的帧数。 30帧
$fps: $time * $fpsPer; //播放动画需要的总帧数，5 乘以 30 也就是 150
$waveCover: white; //背景色

// 让我们看下是如何生成动画的。

@function getShadow($distance) {
  $ratio: $distance / $r; // 首先计算的是距离与半径的比例，0 到 1；0 代表在原点位置，1代表最远距离，就是我们设置的半径。
  $shadowWidth: 1px + 6px * $ratio; // 然后是每条波纹的阴影宽度，我的想法是越远的话阴影越宽。
  $shadowColorOpacity: 0.25 * (1 - $ratio); // 再有每条波纹的透明度，当到达最远距离的时候就消失，透明度为0。
  
  // 这里就是计算的结果。页面上的波纹效果就有了。
  // 问个问题，我的语速是不是太快了，有点紧张，慢不下来。
  @return 0 0 0 #{$distance - 0.5px} $waveCover, 0 0 $shadowWidth $distance * 1px rgba(0,0,0, $shadowColorOpacity);
}

@function getShadows($step: 1) {
  $list: (); // 首先，我们定义一个数组来储存计算的结果

  @for $i from 1 through $num { // 然后使用for循环遍历我们需要生成的波纹。
    $average: $r / $num; // 这里计算的是波纹之间的平均间隔，半径／数量，结果是 22。
    $distance: $average * ($i - 1 + $step); // 下面计算的是波纹距离原点的距离。

    $list: append($list, getShadow($distance), comma); // 将计算的结果储存到数组，并以逗号隔开，comma。
  }

  @return $list; // 最后返回计算结果，没有疑问的话，继续再看生成单个波纹样式的函数
}

.page-home-wave-render{
  height: 100vh;
  background-color: white;
  
  &:before{
    content: '努力加载中···';
    width: 1em;
    text-align: center;
    letter-spacing: 20px;
    word-break: break-all;
    text-align: center;
    font-size: 14px;
    color: #999;
    transform: skewY(-10deg) translate(-50%, -60%);
    text-shadow: -15px 15px 2px rgba(0,0,0, .2);

    @extend %inline-block;
    @extend %percenter;
  }

  &:after{
    content: '';
    width: 2px;
    height: 2px;
    bottom: 25%;
    left: 50%;
    background-color: transparent;
    transform: rotateX(70deg);
    box-shadow: getShadows();
    animation: shadowWave #{$time / $num * 1s} infinite ease-out;

    @extend %absolute;
    @extend %inline-block;
    @extend %border-radius-50;
  }
}

@keyframes shadowWave{
  //定义一个for循环来计算每一帧的样式。
  @for $i from 0 through $fps { 
    $step: $i / $fps; // 首先得到每一帧在所处的动画进度 即当前帧数／总帧数 150
    // 由于 animation 是 0% 到 100%；所以我们必须要将 数字转换为 百分比，类似下面这样
    $perStep: percentage($step); 
    // 要注意一点 转换百分比的这个函数，有个坑。直接传数字会报错，类似这样percentage(0.2)，sass会报错;
    // 所以必须把值赋给一个变量传进去。

    #{$perStep} {
      box-shadow: getShadows($step);
    }
  }

  // 计算过程类似这样
  // $i: 30 // 假如我们计算第30帧的样式，也就是 i 等于 30
  // $step: 30/150; => 0.2 // 然后我们得到进程为 30 ／ 总帧数 150，就是0.2
  // $perStep: 20%; // 转换为百分比就是20%
  // 
  // 20% {
  //  box-shadow: getShadows(0.2); // 然后, 我们将当前的进程, 0.2，传到写好的计算函数里面来得到应有的样式属性。
  // }
  // 到这里有哪些疑问的地方吗。
  // waiting .....
  // 下面来看我们生成样式的函数。
}
